# Install the pipenv environment and run tests

name: Pipenv install and run tests

on: [push, pull_request]

jobs:
  lint:
    runs-on: "ubuntu-latest"
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: lint
        run: |
          pip install --user .[dev]
          tox -e pre-commit,mypy

  wheel:
    strategy:
      fail-fast: false

    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v2

      - name: Create Sdist and Wheel
        # Set SOURCE_DATE_EPOCH from git commit for reproducible build
        # https://reproducible-builds.org/
        run: |
          SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct) pipx run build --sdist --wheel
      - name: Upload Wheel and Sdist as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist

      - name: Install minimum python version
        uses: actions/setup-python@v1
        with:
          python-version: "3.7"

      - name: Install wheel in a venv and check cli works
        # ${GITHUB_REPOSITORY##*/} is the repo name without org
        # Replace this with the cli command if different to the repo name
        run: pipx run --python $(which python3.7) --spec dist/*.whl ${GITHUB_REPOSITORY##*/} --help
  
  test:
    strategy:
      fail-fast: false

    runs-on: "ubuntu-latest"
    env:
      # https://github.com/pytest-dev/pytest/issues/2042
      PY_IGNORE_IMPORTMISMATCH: "1"
      # enable QT tests with no X Display
      QT_QPA_PLATFORM: "offscreen"

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: setup python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: "3.7"

      - name: create requirements.txt
        run: |
          touch requirements.txt
          pip install -r requirements.txt -e .
          pip freeze --exclude-editable > requirements.txt

      - name: run tests
        run: |
          touch requirements_dev.txt
          pip install -r requirements_dev.txt -e .[dev]
          pytest tests

      - name: create requirements_dev.txt
        run: |
          pip freeze --exclude-editable > requirements_dev.txt

      - name: Upload lockfiles
        uses: actions/upload-artifact@v2
        with:
          name: lockfiles
          path: |
            requirements.txt
            requirements_dev.txt

  release:
    needs: [lint, wheel, test]
    runs-on: ubuntu-latest
    # upload to PyPI and make a release on every tag
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Github Release
        # We pin to the SHA, not the tag, for security reasons.
        # https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#using-third-party-actions
        uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5 # v0.1.14
        with:
          files: |
            artifacts/dist/*
            artifacts/lockfiles/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_token }}
        run: pipx run twine upload artifacts/dist/*